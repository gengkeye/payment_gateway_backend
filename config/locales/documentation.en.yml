en:
  documentation:
    title: "DOCUMENTATION"
    introduction:
      title: 'Introduction'
      paragraph1: "This documentation is primarily aimed at developers who would like to integrate Bitcoin payment processing into their online store or website. If you are not a developer, but would still like to accept Bitcoin on your site, you can create a simple payment widget instead, using our step-by-step guide."
      paragraph2: "Skyluster follows industry standards for processing payments, so if you have ever dealt with integrating any payment gateway (not necessarily a Bitcoin one), you should quickly understand how everything works and what to do. For those who have never worked with payment processing, we are going to explain every detail and demonstrate code examples."
      paragraph3: "Skyluster is built using straight and straight-server open source software. You may want to check the documentation for straight-server to better understand the underlying mechanisms, but it is not necessary. Many of the things mentioned in straight-server documentation are also mentioned in the current documentation. "
    overview_payment_process:
      title: 'Gatways Overview'
      paragraph1: "This section describes some basic things about payment processing, as well as introduces terms that will be used in the following sections. Some things described here are common to all payment processors, whereas others may not be. After reading this section, you should have a good general understanding of how Mycelium Gear works, and will be able to proceed to the next sections."
      paragraph2: "A payment processor is used to handle payments for you — charge credit cards, for example — and then report back to your site or online store when a payment is completed. When a user clicks &quot;Pay&quot; on your site, you redirect them to a special payment page on the payment processor website where they can input their credit card information and pay. Then, when they complete (or cancel) the payment, the payment processor lets your site know via a callback (sometimes called a webhook) and transfers the information about the payment by issuing an http request to your site. It is then your site's duty to receive that information and process it."
      paragraph3: "For example, suppose you have a website called worldsbestshoes.com that accepts payments through VeryPay.com, a credit card payment processor. A user picks his shoes, adds them to the &quot;cart&quot; on the site, and clicks &quot;Complete purchase.&quot; At this point, you redirect him to the"
      paragraph4: "There, the user sees a form into which he can type his credit card info. Once he finishes entering it, he clicks &quot;Pay.&quot; As soon as he does that, VeryPay connects to his credit card company's API and attempts to charge the card. If the operation was successful, it redirects the user back to your website (or shows him the button which will redirect him there manually) and also issues a callback (webhook) to"
      paragraph5: "where it sends (via POST parameters) all the info about the payment. If the payment fails, it lets the customer know, and also issues a callback to the same URL at your site, but this time the payment info contains information about the fact that the payment failed."
      paragraph6: "Your site then receives the payment information and, depending on whether it is okay or not, decides what to do. If the payment went through, it marks the order in its own database as paid, and then your shipping department can start packing the shoes. Or it may mark it as &quot;payment failed,&quot; in which case you would probably want to offer your customer an option of trying again with a different credit card."
      paragraph7: "The described process is almost identical to Bitcoin payments. The only difference is that a customer doesn't need to provide any sensitive information, like a credit card number. Instead, on the payment page, he sees a Bitcoin address (both written and as a QR code) and then can use his wallet to send money to that address. It is then the payment processor's job to detect that the payment was made, notify the merchant, and redirect the customer back to the merchant site. This is exactly what Mycelium Gear does."
      paragraph8: "The important question is: where does the money go when a payment is made? Traditionally, with credit card payment processors, the money first goes from the customer's bank account to the payment processor's bank account, and only then goes to the merchant. The problem with this system is that the payment processor has to accept and temporarily store the money on behalf of many different merchants, and be very confident in its ability to protect that money. The merchant on the other hand must be willing to trust the payment processor. Luckily, with Bitcoin, you can decouple storage of money and payment processing. Using BIP32, Mycelium Gear can generate a new address from a public key you get from your Bitcoin wallet (either Mycelium, or Electrum) for each payment invoice. That way, the money paid by a customer always goes directly from the customer's wallet into the merchant's wallet, while the payment processor simply watches the blockchain and checks whether that particular address received the bitcoins. Merchants don't have to trust their payment processor and don't risk losing the money that is held on their behalf, and the merchant processor doesn't have to worry about the costs associated with securely storing money and customer data."
      paragraph9: "Because of this, it is best to think of Mycelium Gear as a payment notification system rather than a payment processor. We only watch the blockchain, we don't actually hold anyone's money."
      paragraph10: "The next sections will explain exactly how you can integrate payment processing into your website or app. However, it is a good idea to get familiar with the terms that will be used first."
      paragraph_title1: "Why do you need a payment processor?"
      paragraph_title2: "How do payment processors usually work?"
      paragraph_title3: "How is Bitcoin payment processing different?"
      paragraph_title4: "Handling the money"
      paragraph_title5: "Terminology"
      li:
        strong1: "Payment processor"
        strong2: "A Gateway"
        strong3: "An Order"
        strong4: "A Callback"
        description1: "is a specialized software or service that integrates into your website and notifies it when a payment is made. For Bitcoin payment processing, Mycelium Gear takes care of exchange rate conversion, various Bitcoin denominations, generating new bitcoin addresses, and monitoring the blockchain for payments. Note that sometimes payment processors are also called payment gateways. These terms are synonymous, however a gateway in our terminology will have a slightly more specific meaning."
        description2: "is an instance that is created in Mycelium Gear that processes all the payments for a particular store. For example, you as a merchant may have two online stores. You would then create two gateways in Mycelium Gear admin panel, and use each one for its respective website." 
        description3: "is created each time your customer decides to pay. An order is a data set that contains information such as an amount to be paid, a bitcoin address to which the payment will be sent, and many other things. Each order is stored in our database, and is associated with a particular Gateway and merchant. An order also has a status that can change. For example, a &quot;paid&quot; status is set when the associated Bitcoin address receives the correct amount." 
        description4: "is an http request that is issued by the payment processor whenever an order changes its status. Each gateway allows you to set a URL to which this request is issued. You have to program your site so that it can process this request, extract the necessary information, and make proper use of it." 
    create_gateway:
      title: "Creating a New Gateway"
      paragraph1: "The first thing you will want to do after you sign up (and read the docs, of course) is to create a new <i>gateway</i>. Gateways are entities that create orders and process payments for a particular store. So, if you only have one online store, you will need to create one gateway."
      paragraph2: "To create a gateway, simply go to this page and fill out the form. Almost all of the fields are optional, and are explained below (required fields are marked with an asterisk *)."
      paragraph3: "*Name is what your customers will see at the top of the payment page when they try to make a purchase. It is also the name of the gateway that you see as a merchant in the admin panel. While it does not affect anything in particular, it's a good idea to put something meaningful in there.
      Confirmations required should typically be set to 0, unless you expect large payment amounts. In Bitcoin, each transaction is considered completely settled only when you have 6 confirmations (which may take about an hour). However, you can still assume with a degree of certainty that the payment will get processed and settled in one hour as soon as the transaction has been broadcasted to the Bitcoin network. You generally don't want your customers to wait, thus the current industry standard is to accept transactions with 0 confirmations. That way, as soon as your customer sends money from his wallet, we can detect that transaction and redirect him back to your website."
      paragraph4: "BIP32 pubkey is the most important of the fields, and looks similar to this (beginning with xpub):"
      paragraph5: "It is based on Bitcoin BIP32 standard, and is derived from your wallet's private key. Mycelium Gear uses it to generate new address for each new order. Not all wallets support BIP32, but two of the most popular ones — Mycelium and Electrum."
      paragraph6: "Order expiration period is the period of time during which a customer has to pay for the order. If he does not pay in time, the order is considered expired. The default is 900 seconds (15 minutes) which is an industry standard."
      paragraph7: "After payment redirect url is used to return the customer back to your website after a successful purchase. This could be a page specific to the order, or to their account."
      paragraph8: "Whenauto redirectis checked, all users whose payments were successful are automatically redirected to the After payment redirect url."
      paragraph9: "Active flag simply means that this gateway is currently ready to process payments. If you need to temporarily stop accepting payments, you can always come back to that form (edit the existing gateway) and uncheck that checkbox."
      paragraph10: "Currency conversion options section allows you to choose what currency your order prices are displayed in, and which bitcoin price source to use to convert that value into the appropriate amount of bitcoins. The default setting is USD and you probably want to leave it that way, since the Bitcoin exchange rate can fluctuate substantially, making it inconvenient to set prices in BTC. The exchange rate provider fields allow you to choose which sources to use for the current exchange rate. Exchange rates are checked in the order set here, with subsequent providers only checked if the previous provider is unavailable for some reason."
      paragraph11: "Additional info about the merchant block is completely optional, but we would prefer if merchants fill it, since this will help us provide our customers with better service. This information is not used for compliance — Mycelium Gear does not handle any money (just watches the transactions on the blockchain) and is not subject to AML/KYC — and we do not share this information with anyone."
      paragraph12: "After you click the 'Create gateway' button below the form, if all fields are valid, you will be redirected to the gateway info page and will be presented with a gateway secret. <strong>You must write it down</strong> as it will not appear again anywhere. If you ever lose that secret, you will need to come back to that form (edit the gateway) and check the 'Regenerate secret' checkbox; however this will invalidate your previous secret and any of your online stores that were using it will have to update it to the new one."
      paragraph13: "The secret key is essentially a signature that all your requests to the gateway are signed with, which the gateway uses to verify that it's you who is talking to it, and not some impostor. We will explain how to use this secret key in detail in the next section."
      paragraph_title1: "Filling the form"
      paragraph_title2: "Getting the gateway secret"
    api:
      title: "API"
      signed_request:
        title: "Signed Request"
        paragraph1: "Most requests to API require a signature which protects gateway from unauthorized access. The signature is a X-Signature HTTP header with a string of about 88 chars:"
        paragraph2: "Where:"
        paragraph3: "For Ruby users signing is already implemented in straight-server-kit gem."
        paragraph4: "There is a tiny chance that request will fail with &quot;X-Nonce is invalid&quot; error because of simultaneous signed request with a greater nonce. This may be mitigated by repeating request with the updated nonce and signature."
        paragraph5: "Some languages like JavaScript have poor support for binary string, so hexdigest signature is also valid"
        paragraph6: "Where:"
        paragraph7: "Example 1:"
        paragraph8: "Example 2:"
        paragraph9: "Example 3:"
        ul:
          li1: "REQUEST_METHOD: 'GET', 'POST', etc."
          li2: "REQUEST_URI: “/full/path/with?arguments&amp;and#fragment”, without hostname"
          li3: "REQUEST_BODY: final request body string with JSON or blank string"
          li4: "X-Nonce: HTTP header with an integer which must be incremented with each request (protects from replay attack), for example (Time.now.to_f * 1000).to_i"
          li5: "SHA512: binary SHA-2, 512 bits"
          li6: "HMAC-SHA512: binary HMAC with SHA512"
          li7: "GATEWAY_SECRET: key for HMAC"
          li8: "Base64StrictEncode: Base64 encoding according to RFC 4648"
          li9: "SHA512: hex-encoded SHA-2, 512 bits"
          li10: "HMAC-SHA512: hex-encoded HMAC with SHA512"
      create_orders:
        title: "Creating Orders"
        paragraph1: "Creating an order is the first step towards accepting a payment. Generally, you want to create an order AFTER your customer clicks &quot;Complete purchase&quot; or a similar button in your online store. After you create an order using our RESTFUL API, you can redirect the user to the Mycelium Gear payment page associated with this order."
        paragraph2: "To create an order, you should issue a signed POST request to https://gateway.gear.mycelium.com/gateways/:gateway_id/orders with at least one param — amount — it determines the amount to be paid for this order. The amount should be in the currency you have previously set for the gateway. If the gateway currency is BTC, then the amount is normally in satoshis. So, the request may look like this:"
        paragraph3: "You can get the api_gateway_id value from your gateway's info in the admin panel."
        paragraph4: "Keychain id is used to generate an address for the next order. It can be any integer &gt; 0, but it's better if it is a consecutive integer, so keep track of your order ids in your application. With the keychain id, the request will look like this:"
        paragraph5: "You may want to send some additional data with the transaction that will later be returned to you, unchanged, in the callback. This is useful if you wish to identify which record in your DB is associated with which order by using something other than order_id."
        paragraph6: "For example, suppose you have a Purchase model in your Rails app. You then might want to create a purchase and send its id in the <code>callback_data</code> param:"
        paragraph7: "Later on, when a callback request is issued, this <code>callback_data</code> param will be returned back with it and you'll be able to find that purchase in your DB."
        paragraph8: "In response to the request above, you will receive the following json from Mycelium Gear:"
        paragraph9: "With this information, you can either manually display the payment address to the customer on your website (so he doesn't even have to leave your site), or you can redirect him to the Mycelium Gear payment page using the payment_id. The payment page url for redirection will then be:"
        paragraph10: "keychain_id is used to derive the next address from your BIP32 pubkey. If you try to create orders with the same keychain_id they will also have the same address, which is, as you can imagine, not a very good idea. However it is allowed and there's a good reason for that."
        paragraph11: "Wallets that support BIP32 pubkeys will only do a forward address lookup for a limited number of addreses. For example, if you have 20 expired, unpaid orders and someone sends you money to the address of the 21-st order, your wallet may not see that. Thus, it is important to ensure that there are no more than 20 expired orders in a row."
        paragraph12: "If you have 20 orders in a row and try to create another one, Gear will see that and will automatically reuse the keychain_id (and consequently, the address too) of the 20-th order. It will also set the 21-st order's reused field to the value of 1. You will see it marked as reused in the admin panel too."
        paragraph13: "CAUTION: It is very important to make sure that you don't accidentally provide keychain_id that is too far away from the last used one. For example, if the gateway's <code>last_keychain_id</code> is <code>10</code>, do not use <code>35</code> for the next order, use <code>11</code>. <code>last_keychain_id</code> is always returned with other info when you create or check order status. Make sure you always track <code>last_keychain_id</code> in your application - it is normally returned to you in the json with the other order info when you create or check orders."
        paragraph14: "Suppose you have a Rails controller with an action called complete_purchase which handles customer requests when they hit the &quot;Complete purchase&quot; button on your site. This is what code for it may look like:"
        paragraph_title1: "The request and the signature"
        paragraph_title2: "Sending additional data"
        paragraph_title3: "The response"
        paragraph_title4: "Address reuse and keychain_id"
        paragraph_title5: "Code example"
      receive_order_callback:
        title: "Receiving Order Status Change Callback"
        paragraph1: "Whenever an order status changes, Mycelium Gear issues a GET http request to the url specified in the gateway's callback field (if you filled it) or in the order's <code>callback_url</code> param. This way it lets your site know that the payment was either successful or has failed for some reason. This http request is also sometimes called a webhook, although we prefer not to use that term."
        paragraph2: "Important information is passed in this http request as url params. Here's what a typical callback may look like:"
        paragraph3: "Also, request will have special header:"
        paragraph4: "The following list explains in detail the information and parameters in the GET callback request:"
        paragraph5: "It's generated in the same way as a signature for signed API requests, except that it uses blank Nonce and Body."
        paragraph6: "In Ruby, callback signature can be verified using <code>straight-server-kit</code> gem."
        paragraph7: "Details of signature verification."
        paragraph8: "JavaScript version using"
        paragraph_title1: "Callback signature"
        ul:
          li1: "An internal id of the order. This is how you can find the corresponding purchase record in your database. It is also used for the signature."
          li2: "This is the amount in the gateway's currency that was supposed to be paid"
          li3: "This is the amount in btc that was supposed to be paid"
          li4: "This is the amount in btc that has been paid"
          li5: "Returns a numerical value which can be either of the following:"
          li6: "unconfirmed; transaction was received, but does not have enough confirmations yet"
          li7: "paid in full"
          li8: "underpaid; not enough money received"
          li9: "overpaid; too much has been received"
          li10: "expired; customer did not pay in time"
          li11: "canceled; customer has canceled the order"
          li12: "The Bitcoin address to which a transaction was supposed to be made"
          li13: "If the status is 1,2,3 or 4, this will contain JSON array with the Bitcoin transaction IDs"
          li14: "This contains any additional data that was sent along with the transaction while creating the order. For example, if you sent &quot;hello world&quot; as data in the request that created that order, you will also get the same string back with a callback — as the value for the callback_data key within the returned json."
          li15: " This is the most important piece of information in regards to security. Keep in mind that anyone can make a request to that callback url of yours and basically fool your website into believing that a certain order was paid. To avoid that, Mycelium Gear uses signatures to sign a callback request, so that you can verify it came from Mycelium Gear and not somebody else. This is explained in detail below."

      check_order_status:
        title: "Checking Order Status Manually"
        paragraph1: "Although being notified through a callback is the standard way of letting your website know that an order status has changed, sometimes it may not be enough. For example, your website may be down and may not be able to process the callback at the time it was issued. Even though Mycelium Gear will keep attempting to issue new callback requests to try and reach your website, it will only keep doing it for an hour, after which it will quit."
        paragraph2: "Thus, it is important to have another reliable method of checking order statuses. To check the current status of an order, issue the following signed GET request:"
        paragraph3: "where <code>:api_gateway_id</code> is the API id of your gateway, which you can look up on its info page; and <code>:payment_id</code> is the way you identify your order (it was returned to you initially when you created the order). The response will return a json similar to what a callback might have passed to you via params:"
        paragraph4: "You should use this manual check only if you suspect that you may have missed a callback. It should not be standard practice to keep querying the payment processor server every few seconds just to check the status of a particular order."
      
      order_websocket:
        title: "Order Websocket"
        paragraph1: "Another way to track order status is to be continually connected to its respective websocket. In fact, this is what the payment page that your customer is redirected to does. However, you may decide you don't want to use the Mycelium Gear payment page. Perhaps you would want to present your customer with your own customized payment page that will be on your own site. Or even if you are using a standard payment page, your backend software may still want to connect to the order's websocket instead of waiting for a callback request."
        paragraph2: "To connect to the websocket, you should use the following URL:"
        paragraph3: "where 1 is your order id. When order status changes, the websocket returns you order data in json, exactly the same data that would be returned as a response to a regular http request checking order status manually."
      
      order_cancel:
        title: "Order Cancellation"
        paragraph1: "If user cancels his purchase, it's better to cancel the Mycelium Gear order as well."
        paragraph2: "Order can be canceled by sending a signed request:"
        paragraph3: "or you can send the same request by using straight-server-kit:"
      
      receive_last_keychain:
        title: "Receiving Last Keychain ID for Gateway"
        paragraph1: "You can get last keychain id for a specific gateway with the following request:"
        paragraph2: "Then you'll get something like this:"
    
    developer_api:
      title: "Developer API"
      basic:
        title: "Basic"
        paragraph1: "The API is based on JSONAPI (version 1.0) implementation."
        paragraph2: "Versioninig is done through HTTP header Accept-Version. It's possible to not set version, then last will be used. "
        paragraph3: "In order to use Developer API you should first enable it and get a Secret key. To do so, proceed to account section, check &quot;Enable Developers API&quot; and click &quot;Save changes&quot; button."
        paragraph4: "Each request to the API is signed usging the method described"
        paragraph4_a: "here"
        paragraph5: "You can generate your <strong>Secret key</strong> on your account page. At the bottom of the page check &quot;Regenerate API Secret&quot; checkbox, enter your current password and click &quot;Save changes&quot; button - API Secret key will be generated for you. Please, don't forget to write it down somewhere. If you lost API Secret key, you will need to regenerate it. After this old key will no longer work."
        paragraph6: "All errors are returned under the <em>errors</em> property in the returned object, the value of that property is as an array of errors. If there are errors in the request you've sent, it will return the following:"     
        paragraph7: "If there are validation errors, a response may look like this:"
        paragraph_title1: "Authentication"
        paragraph_title2: "Errors"
      gateway:
        title: "Gateways"
        paragraph1: "With Gear's developer API, it is possible to create, update or get a list (or one) of gateways."
        paragraph2: "To create a gateway, you need to make a POST request to /api/gateways with the following body:"
        paragraph3: "Required fields:"
        paragraph4: "Optional fields:"
        paragraph5: "Example:"
        paragraph6: "A response to this request should be the following object:"
        paragraph7: "Additionally it returns a <em>secret</em> key. Status code is: <strong>201</strong>"
        paragraph8: "To update a gateway, you need to make a <strong>PATCH</strong> request to <code>/api/gateways</code> with the following body:"
        paragraph9: "where <em>id</em> is an ID of a gateway you want to change. You can list fields you wish to change under the <em>attributes</em> key. Others fields will not change."
        paragraph10: "To get information about a specific gateway, you need to make a <strong>GET</strong> request <code>/api/gateways/{gateway_id}</code>."
        paragraph12: "In result a response will be:"
        paragraph13: "To fetch a list of all gateways you need to make a <strong>GET</strong> request to <code>/api/gateways</code> with an empty body."
        paragraph14: "A response to this request should be the following object:"
        paragraph15: "By default the returned list is limited to 25 records. If you want more, you'll need to send a query parameter described in <em>Pagination</em> section."
        paragraph16: "The strategy is cursor-based. The following options may be passed as query parameters:"
        paragraph17: "The resulting JSON will contain a <em>meta</em> property with the pagination info:"
        paragraph18: "Example:"
        paragraph19: "This will show first 5 gateways."
        paragraph20: "If old secret was compromised or lost it is possible to regenerate a new one."
        paragraph21: "<strong>GET</strong> request to address: <code>api/gateways/{gateways_id}/regenerate_secret</code>"
        paragraph22: "The resulting JSON will be like:"
        ul:
          li1: "Name of your gateway"
          li2: "Public key (xpub) exported from the wallet to which you will receive Bitcoins"
          li3: "Number of required confirmations to consider transaction successful"
          li4: "How long the order will be waiting for a payment (in milliseconds). Should be between 0 and 1800"
          li5: "Default currency to display order amounts in"
          li6: "If a gateway is active (can generate new orders). Default: <em>true</em>"
          li7: "How we derive each new address from the provided xpub (see BIP32 documentation)"
          li8: "A callback url is where our server will report all order status changes by performing a callback request"
          li9: "Is a URL to which users are redirected after they made a payment"
          li10: "Automatically redirect user after payment. Boolean. Default: <em>false</em>"
          li11: "Testnet public key. Used if <em>test_mode</em> is enabled"
          li12: "Activate or deactivate testnet mode. Default: <em>false</em>Convert given amount in to specific currency. Possible: &quot;BTC&quot;, &quot;USD&quot;, &quot;EUR&quot;. Default: <em>&quot;BTC&quot;</em>"
          li13: "Convert given amount in to specific currency. Possible: &quot;BTC&quot;, &quot;USD&quot;, &quot;EUR&quot;. Default: <em>&quot;BTC&quot;</em>"
          li14: "Where we get exchange rates. Array. Default: <em>[&quot;Bitstamp&quot;, &quot;Btce&quot;, &quot;Kraken&quot;]</em>"
          li15: "Send notifications about new payments to client email. Boolean. Default: <em>false</em>"
          li16: "Locale for all messages. Only english aviable on the current moment."
          li17: "Is a URL to which users are taken if they click Cancel in the payment screen."
        paragraph_title1: "Create gateway"
        paragraph_title2: "Update gateway"
        paragraph_title3: "Get full information about specific gateway"
        paragraph_title4: "Get gateways list"
        paragraph_title5: "Pagination"
        paragraph_title6: "Regenerate gateway secret key"

      address_providers:
        title: "Address Providers"
        url_structure: "URL STRUCTURE"
        parameters: "PARAMETERS (* Required field)"
        returns: "RETURNS"
        example_request: "Example Request"

        list:
          title: "List"
          paragraph1: "Returns list of address providers as array of hashes. Each element of the array contains ID of address provider and its type (e.g. 'address_provider_cashila')."

        cashila:
          title: "Cashila"
          login: 
            title: "Login"
            paragraph1: "Create Cashila Address Provider by providing credentials to already existing Cashila account. Exactly one set of parameters must be provided: either email/password or token/secret."

          withdraw:
            title: "Withdraw"

          legal_entity: 
            title: "Legal Entity"

          individual_entity:
            title: "Individual Entity"
